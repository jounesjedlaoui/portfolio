/*! Buefy v0.1.3 | MIT License | github.com/buefy/buefy */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
    typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Checkbox = {}, global.Vue));
})(this, (function (exports, vue) { 'use strict';

    var CheckRadioMixin = {
      props: {
        modelValue: [String, Number, Boolean, Function, Object, Array],
        nativeValue: [String, Number, Boolean, Function, Object, Array],
        type: String,
        disabled: Boolean,
        required: Boolean,
        name: String,
        size: String
      },
      emits: ['update:modelValue'],
      data: function data() {
        return {
          newValue: this.modelValue
        };
      },
      computed: {
        computedValue: {
          get: function get() {
            return this.newValue;
          },
          set: function set(value) {
            this.newValue = value;
            this.$emit('update:modelValue', value);
          }
        },
        disabledOrUndefined: function disabledOrUndefined() {
          // On Vue 3, setting a boolean attribute `false` does not remove it.
          // To remove it, `null` or `undefined` has to be given.
          // Setting `false` ends up with a grayed out component.
          return this.disabled || undefined;
        },
        requiredOrUndefined: function requiredOrUndefined() {
          // On Vue 3, setting a boolean attribute `false` does not remove it,
          // `null` or `undefined` has to be given to remove it.
          return this.required || undefined;
        }
      },
      watch: {
        /**
        * When v-model change, set internal value.
        */
        modelValue: function modelValue(value) {
          this.newValue = value;
        }
      },
      methods: {
        focus: function focus() {
          // MacOS FireFox and Safari do not focus when clicked
          this.$refs.input.focus();
        }
      }
    };

    var script$1 = {
        name: 'BCheckbox',
        mixins: [CheckRadioMixin],
        props: {
            indeterminate: Boolean,
            ariaLabelledby: String,
            trueValue: {
                type: [String, Number, Boolean, Function, Object, Array],
                default: true
            },
            falseValue: {
                type: [String, Number, Boolean, Function, Object, Array],
                default: false
            },
            autocomplete: {
                type: String,
                default: 'on'
            },
            inputId: {
                type: String,
                default: ''
            }
        }
    };

    const _hoisted_1$1 = ["disabled"];
    const _hoisted_2$1 = ["id", ".indeterminate", "autocomplete", "disabled", "required", "name", "value", "true-value", "false-value", "aria-labelledby"];
    const _hoisted_3 = ["id"];

    function render$1(_ctx, _cache, $props, $setup, $data, $options) {
      return (vue.openBlock(), vue.createElementBlock("label", {
        class: vue.normalizeClass(["b-checkbox checkbox", [_ctx.size, { 'is-disabled': _ctx.disabled }]]),
        ref: "label",
        disabled: _ctx.disabledOrUndefined,
        onClick: _cache[2] || (_cache[2] = (...args) => (_ctx.focus && _ctx.focus(...args))),
        onKeydown: [
          _cache[3] || (_cache[3] = vue.withKeys(vue.withModifiers($event => (_ctx.$refs.label.click()), ["prevent"]), ["enter"])),
          _cache[4] || (_cache[4] = vue.withKeys(vue.withModifiers($event => (_ctx.$refs.label.click()), ["prevent"]), ["space"]))
        ]
      }, [
        vue.createCommentVNode(" Checkbox needs to listen for a space event instead of a just a\n             click and enter event so that that using the keyboard spacebar will also\n             trigger the checkbox change in the b-table "),
        vue.withDirectives(vue.createElementVNode("input", {
          "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => ((_ctx.computedValue) = $event)),
          id: $props.inputId,
          ".indeterminate": $props.indeterminate,
          type: "checkbox",
          ref: "input",
          onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, ["stop"])),
          autocomplete: $props.autocomplete,
          disabled: _ctx.disabledOrUndefined,
          required: _ctx.requiredOrUndefined,
          name: _ctx.name,
          value: _ctx.nativeValue,
          "true-value": $props.trueValue,
          "false-value": $props.falseValue,
          "aria-labelledby": $props.ariaLabelledby
        }, null, 8 /* PROPS */, _hoisted_2$1), [
          [vue.vModelCheckbox, _ctx.computedValue]
        ]),
        vue.createElementVNode("span", {
          class: vue.normalizeClass(["check", _ctx.type])
        }, null, 2 /* CLASS */),
        vue.createElementVNode("span", {
          id: $props.ariaLabelledby,
          class: "control-label"
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 8 /* PROPS */, _hoisted_3)
      ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_1$1))
    }

    script$1.render = render$1;
    script$1.__file = "src/components/checkbox/Checkbox.vue";

    var script = {
        name: 'BCheckboxButton',
        mixins: [CheckRadioMixin],
        props: {
            type: {
                type: String,
                default: 'is-primary'
            },
            expanded: Boolean
        },
        data() {
            return {
                isFocused: false
            }
        },
        computed: {
            checked() {
                if (Array.isArray(this.newValue)) {
                    return this.newValue.indexOf(this.nativeValue) >= 0
                }
                return this.newValue === this.nativeValue
            }
        }
    };

    const _hoisted_1 = ["disabled"];
    const _hoisted_2 = ["disabled", "required", "name", "value"];

    function render(_ctx, _cache, $props, $setup, $data, $options) {
      return (vue.openBlock(), vue.createElementBlock("div", {
        class: vue.normalizeClass(["control", { 'is-expanded': $props.expanded }])
      }, [
        vue.createElementVNode("label", {
          class: vue.normalizeClass(["b-checkbox checkbox button", [$options.checked ? $props.type : null, _ctx.size, {
                    'is-disabled': _ctx.disabled,
                    'is-focused': $data.isFocused
                }]]),
          ref: "label",
          disabled: _ctx.disabledOrUndefined,
          onClick: _cache[4] || (_cache[4] = (...args) => (_ctx.focus && _ctx.focus(...args))),
          onKeydown: _cache[5] || (_cache[5] = vue.withKeys(vue.withModifiers($event => (_ctx.$refs.label.click()), ["prevent"]), ["enter"]))
        }, [
          vue.renderSlot(_ctx.$slots, "default"),
          vue.withDirectives(vue.createElementVNode("input", {
            "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => ((_ctx.computedValue) = $event)),
            type: "checkbox",
            ref: "input",
            onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, ["stop"])),
            disabled: _ctx.disabledOrUndefined,
            required: _ctx.requiredOrUndefined,
            name: _ctx.name,
            value: _ctx.nativeValue,
            onFocus: _cache[2] || (_cache[2] = $event => ($data.isFocused = true)),
            onBlur: _cache[3] || (_cache[3] = $event => ($data.isFocused = false))
          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2), [
            [vue.vModelCheckbox, _ctx.computedValue]
          ])
        ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_1)
      ], 2 /* CLASS */))
    }

    script.render = render;
    script.__file = "src/components/checkbox/CheckboxButton.vue";

    var use = function use(plugin) {
      if (typeof window !== 'undefined' && window.Vue) {
        window.Vue.use(plugin);
      }
    };

    // use `name` to register a Functional Component which will become unresolvable
    // in production build due to name mangling.
    var registerComponent = function registerComponent(Vue, component, name) {
      Vue.component(name || component.name, component);
    };

    var Plugin = {
      install: function install(Vue) {
        registerComponent(Vue, script$1);
        registerComponent(Vue, script);
      }
    };
    use(Plugin);

    exports.BCheckbox = script$1;
    exports.BCheckboxButton = script;
    exports.default = Plugin;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
