/*! Buefy v0.1.3 | MIT License | github.com/buefy/buefy */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Loading = {}, global.Vue));
})(this, (function (exports, vue) { 'use strict';

  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }

  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  }

  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }

  /**
   * Merge function to replace Object.assign with deep merging possibility
   */
  var isObject = function isObject(item) {
    return _typeof(item) === 'object' && !Array.isArray(item);
  };
  var mergeFn = function mergeFn(target, source) {
    var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (deep || !Object.assign) {
      var isDeep = function isDeep(prop) {
        return isObject(source[prop]) && target !== null && Object.prototype.hasOwnProperty.call(target, prop) && isObject(target[prop]);
      };
      var replaced = Object.getOwnPropertyNames(source).map(function (prop) {
        return _defineProperty({}, prop, isDeep(prop) ? mergeFn(target[prop], source[prop], deep) : source[prop]);
      }).reduce(function (a, b) {
        return _objectSpread$1(_objectSpread$1({}, a), b);
      }, {});
      return _objectSpread$1(_objectSpread$1({}, target), replaced);
    } else {
      return Object.assign(target, source);
    }
  };
  var merge = mergeFn;
  function removeElement(el) {
    if (typeof el.remove !== 'undefined') {
      el.remove();
    } else if (typeof el.parentNode !== 'undefined' && el.parentNode !== null) {
      el.parentNode.removeChild(el);
    }
  }

  // references
  // - https://github.com/vuejs/core/blob/1c525f75a3d17a6356d5f66765623c0ae7c0ebcc/packages/runtime-core/src/apiCreateApp.ts#L361
  // - https://github.com/vuejs/core/blob/1c525f75a3d17a6356d5f66765623c0ae7c0ebcc/packages/runtime-core/src/component.ts#L1036-L1054
  //
  // we cannot access getExposeProxy since it is not exported from `vue`, though,
  // its purpose seems to be one-time initialization of component.exposeProxy,
  // which should have been done by this function call
  function getComponentFromVNode(vnode) {
    if (!vnode) {
      return undefined;
    }
    var component = vnode.component;
    if (!component) {
      return undefined;
    }
    return component.exposed && component.exposeProxy || component.proxy;
  }

  // Copies the context from a given app to another app.
  //
  // This function is necessary to programmatically mount a component; e.g.,
  // Modal.
  // Since Vue 3's app can mount only one component, we have to create a new app
  // to mount another new component.
  // If we create a new app with `createApp` API, no context (e.g., installed
  // components, directives) is available on the new app.
  // This function can copy the context from the host app to the new app.
  //
  // Depends on what Vue internally does: https://github.com/vuejs/core/blob/b775b71c788499ec7ee58bc2cf4cd04ed388e072/packages/runtime-core/src/apiCreateApp.ts#L170-L190
  //
  // This function also should take care of compatiblity with other plugins.
  // We need a generic solution, though, it fixes compatiblity issues of
  // individual plugins for now.
  function copyAppContext(src, dest) {
    // replacing _context won't work because methods of app bypasses app._context
    var srcContext = src._context;
    var destContext = dest._context;
    destContext.config = srcContext.config;
    destContext.mixins = srcContext.mixins;
    destContext.components = srcContext.components;
    destContext.directives = srcContext.directives;
    destContext.provides = srcContext.provides;
    destContext.optionsCache = srcContext.optionsCache;
    destContext.propsCache = srcContext.propsCache;
    destContext.emitsCache = srcContext.emitsCache;
    // vue-i18n support: https://github.com/ntohq/buefy-next/issues/153
    if ('__VUE_I18N_SYMBOL__' in src) {
      dest.__VUE_I18N_SYMBOL__ = src.__VUE_I18N_SYMBOL__;
    }
  }

  // Polyfills for SSR

  var isSSR = typeof window === 'undefined';
  var HTMLElement = isSSR ? Object : window.HTMLElement;

  var script = {
      name: 'BLoading',
      props: {
          modelValue: Boolean,
          programmatic: Boolean,
          container: [Object, Function, HTMLElement],
          isFullPage: {
              type: Boolean,
              default: true
          },
          animation: {
              type: String,
              default: 'fade'
          },
          canCancel: {
              type: Boolean,
              default: false
          },
          onCancel: {
              type: Function,
              default: () => {}
          }
      },
      emits: ['close', 'update:is-full-page', 'update:modelValue'],
      data() {
          return {
              isActive: this.modelValue || false,
              displayInFullPage: this.isFullPage
          }
      },
      watch: {
          modelValue(value) {
              this.isActive = value;
          },
          isFullPage(value) {
              this.displayInFullPage = value;
          }
      },
      methods: {
          /**
          * Close the Modal if canCancel.
          */
          cancel() {
              if (!this.canCancel || !this.isActive) return

              this.close();
          },
          /**
          * Emit events, and destroy modal if it's programmatic.
          */
          close() {
              this.onCancel.apply(null, arguments);
              this.$emit('close');
              this.$emit('update:modelValue', false);

              // Timeout for the animation complete before destroying
              if (this.programmatic) {
                  this.isActive = false;
                  // TODO: should the following happen outside this component;
                  // i.e., in index.js?
                  setTimeout(() => {
                      removeElement(this.$el);
                  }, 150);
              }
          },
          /**
          * Keypress event that is bound to the document.
          */
          keyPress({ key }) {
              if (key === 'Escape' || key === 'Esc') this.cancel();
          }
      },
      created() {
          if (typeof window !== 'undefined') {
              document.addEventListener('keyup', this.keyPress);
          }
      },
      mounted() {
          // Insert the Loading component in body tag
          // only if it's programmatic
          // (moved from beforeMount because $el is not bound during beforeMount)
          // TODO: should this happen outside this component; i.e., in index.js?
          if (this.programmatic) {
              if (!this.container) {
                  document.body.appendChild(this.$el);
              } else {
                  this.displayInFullPage = false;
                  this.$emit('update:is-full-page', false);
                  this.container.appendChild(this.$el);
              }
              this.isActive = true;
          }
      },
      beforeUnmount() {
          if (typeof window !== 'undefined') {
              document.removeEventListener('keyup', this.keyPress);
          }
      }
  };

  const _hoisted_1 = /*#__PURE__*/vue.createElementVNode("div", { class: "loading-icon" }, null, -1 /* HOISTED */);

  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (vue.openBlock(), vue.createBlock(vue.Transition, { name: $props.animation }, {
      default: vue.withCtx(() => [
        ($data.isActive)
          ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(["loading-overlay is-active", { 'is-full-page': $data.displayInFullPage }])
            }, [
              vue.createElementVNode("div", {
                class: "loading-background",
                onClick: _cache[0] || (_cache[0] = (...args) => ($options.cancel && $options.cancel(...args)))
              }),
              vue.renderSlot(_ctx.$slots, "default", {}, () => [
                _hoisted_1
              ])
            ], 2 /* CLASS */)), [
              [vue.vShow, $data.isActive]
            ])
          : vue.createCommentVNode("v-if", true)
      ]),
      _: 3 /* FORWARDED */
    }, 8 /* PROPS */, ["name"]))
  }

  script.render = render;
  script.__file = "src/components/loading/Loading.vue";

  var use = function use(plugin) {
    if (typeof window !== 'undefined' && window.Vue) {
      window.Vue.use(plugin);
    }
  };

  // use `name` to register a Functional Component which will become unresolvable
  // in production build due to name mangling.
  var registerComponent = function registerComponent(Vue, component, name) {
    Vue.component(name || component.name, component);
  };
  var registerComponentProgrammatic = function registerComponentProgrammatic(Vue, property, component) {
    if (!Vue.config.globalProperties.$buefy) Vue.config.globalProperties.$buefy = {};
    Vue.config.globalProperties.$buefy[property] = component;
  };

  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var LoadingProgrammatic = /*#__PURE__*/function () {
    function LoadingProgrammatic(app) {
      _classCallCheck(this, LoadingProgrammatic);
      this.app = app; // may be undefined in the testing environment
    }
    _createClass(LoadingProgrammatic, [{
      key: "open",
      value: function open(params) {
        var defaultParam = {
          programmatic: true
        };
        var propsData = merge(defaultParam, params);
        var container = document.createElement('div');
        // Vue 3 requires a new app to mount another component
        var vueInstance = vue.createApp({
          data: function data() {
            return {
              loadingVNode: null
            };
          },
          methods: {
            close: function close() {
              // TODO: too much dependence on Vue's internal structure?
              var loading = getComponentFromVNode(this.loadingVNode);
              if (loading) {
                loading.close();
              }
            }
          },
          render: function render() {
            this.loadingVNode = vue.h(script, _objectSpread(_objectSpread({}, propsData), {}, {
              onClose: function onClose() {
                if (propsData.onClose) {
                  propsData.onClose.apply(propsData, arguments);
                }
                // timeout for the animation complete before destroying
                setTimeout(function () {
                  vueInstance.unmount();
                }, 150);
              }
            }));
            return this.loadingVNode;
          }
        });
        if (this.app) {
          copyAppContext(this.app, vueInstance);
        }
        return vueInstance.mount(container);
      }
    }]);
    return LoadingProgrammatic;
  }();
  var Plugin = {
    install: function install(Vue) {
      registerComponent(Vue, script);
      registerComponentProgrammatic(Vue, 'loading', new LoadingProgrammatic(Vue));
    }
  };
  use(Plugin);

  exports.BLoading = script;
  exports.LoadingProgrammatic = LoadingProgrammatic;
  exports.default = Plugin;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
