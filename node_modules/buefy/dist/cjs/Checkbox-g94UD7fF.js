'use strict';

var CheckRadioMixin = require('./CheckRadioMixin-tbFOgamu.js');
var vue = require('vue');

var script = {
    name: 'BCheckbox',
    mixins: [CheckRadioMixin.CheckRadioMixin],
    props: {
        indeterminate: Boolean,
        ariaLabelledby: String,
        trueValue: {
            type: [String, Number, Boolean, Function, Object, Array],
            default: true
        },
        falseValue: {
            type: [String, Number, Boolean, Function, Object, Array],
            default: false
        },
        autocomplete: {
            type: String,
            default: 'on'
        },
        inputId: {
            type: String,
            default: ''
        }
    }
};

const _hoisted_1 = ["disabled"];
const _hoisted_2 = ["id", ".indeterminate", "autocomplete", "disabled", "required", "name", "value", "true-value", "false-value", "aria-labelledby"];
const _hoisted_3 = ["id"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (vue.openBlock(), vue.createElementBlock("label", {
    class: vue.normalizeClass(["b-checkbox checkbox", [_ctx.size, { 'is-disabled': _ctx.disabled }]]),
    ref: "label",
    disabled: _ctx.disabledOrUndefined,
    onClick: _cache[2] || (_cache[2] = (...args) => (_ctx.focus && _ctx.focus(...args))),
    onKeydown: [
      _cache[3] || (_cache[3] = vue.withKeys(vue.withModifiers($event => (_ctx.$refs.label.click()), ["prevent"]), ["enter"])),
      _cache[4] || (_cache[4] = vue.withKeys(vue.withModifiers($event => (_ctx.$refs.label.click()), ["prevent"]), ["space"]))
    ]
  }, [
    vue.createCommentVNode(" Checkbox needs to listen for a space event instead of a just a\n             click and enter event so that that using the keyboard spacebar will also\n             trigger the checkbox change in the b-table "),
    vue.withDirectives(vue.createElementVNode("input", {
      "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => ((_ctx.computedValue) = $event)),
      id: $props.inputId,
      ".indeterminate": $props.indeterminate,
      type: "checkbox",
      ref: "input",
      onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, ["stop"])),
      autocomplete: $props.autocomplete,
      disabled: _ctx.disabledOrUndefined,
      required: _ctx.requiredOrUndefined,
      name: _ctx.name,
      value: _ctx.nativeValue,
      "true-value": $props.trueValue,
      "false-value": $props.falseValue,
      "aria-labelledby": $props.ariaLabelledby
    }, null, 8 /* PROPS */, _hoisted_2), [
      [vue.vModelCheckbox, _ctx.computedValue]
    ]),
    vue.createElementVNode("span", {
      class: vue.normalizeClass(["check", _ctx.type])
    }, null, 2 /* CLASS */),
    vue.createElementVNode("span", {
      id: $props.ariaLabelledby,
      class: "control-label"
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 8 /* PROPS */, _hoisted_3)
  ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_1))
}

script.render = render;
script.__file = "src/components/checkbox/Checkbox.vue";

exports.script = script;
