'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Checkbox = require('./Checkbox-g94UD7fF.js');
var CheckRadioMixin = require('./CheckRadioMixin-tbFOgamu.js');
var vue = require('vue');
var plugins = require('./plugins-aEujRPek.js');

var script = {
    name: 'BCheckboxButton',
    mixins: [CheckRadioMixin.CheckRadioMixin],
    props: {
        type: {
            type: String,
            default: 'is-primary'
        },
        expanded: Boolean
    },
    data() {
        return {
            isFocused: false
        }
    },
    computed: {
        checked() {
            if (Array.isArray(this.newValue)) {
                return this.newValue.indexOf(this.nativeValue) >= 0
            }
            return this.newValue === this.nativeValue
        }
    }
};

const _hoisted_1 = ["disabled"];
const _hoisted_2 = ["disabled", "required", "name", "value"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(["control", { 'is-expanded': $props.expanded }])
  }, [
    vue.createElementVNode("label", {
      class: vue.normalizeClass(["b-checkbox checkbox button", [$options.checked ? $props.type : null, _ctx.size, {
                'is-disabled': _ctx.disabled,
                'is-focused': $data.isFocused
            }]]),
      ref: "label",
      disabled: _ctx.disabledOrUndefined,
      onClick: _cache[4] || (_cache[4] = (...args) => (_ctx.focus && _ctx.focus(...args))),
      onKeydown: _cache[5] || (_cache[5] = vue.withKeys(vue.withModifiers($event => (_ctx.$refs.label.click()), ["prevent"]), ["enter"]))
    }, [
      vue.renderSlot(_ctx.$slots, "default"),
      vue.withDirectives(vue.createElementVNode("input", {
        "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => ((_ctx.computedValue) = $event)),
        type: "checkbox",
        ref: "input",
        onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, ["stop"])),
        disabled: _ctx.disabledOrUndefined,
        required: _ctx.requiredOrUndefined,
        name: _ctx.name,
        value: _ctx.nativeValue,
        onFocus: _cache[2] || (_cache[2] = $event => ($data.isFocused = true)),
        onBlur: _cache[3] || (_cache[3] = $event => ($data.isFocused = false))
      }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2), [
        [vue.vModelCheckbox, _ctx.computedValue]
      ])
    ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_1)
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "src/components/checkbox/CheckboxButton.vue";

var Plugin = {
  install: function install(Vue) {
    plugins.registerComponent(Vue, Checkbox.script);
    plugins.registerComponent(Vue, script);
  }
};
plugins.use(Plugin);

exports.BCheckbox = Checkbox.script;
exports.BCheckboxButton = script;
exports.default = Plugin;
