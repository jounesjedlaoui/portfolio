'use strict';

var vue = require('vue');

var script = {
    name: 'BTag',
    props: {
        attached: Boolean,
        closable: Boolean,
        type: [String, Object],
        size: String,
        rounded: Boolean,
        disabled: Boolean,
        ellipsis: Boolean,
        tabstop: {
            type: Boolean,
            default: true
        },
        ariaCloseLabel: String,
        icon: String,
        iconType: String,
        iconPack: String,
        closeType: String,
        closeIcon: String,
        closeIconPack: String,
        closeIconType: String
    },
    emits: ['click', 'close'],
    computed: {
        // setting a boolean attribute `false` does not remove it on Vue 3.
        // `null` or `undefined` has to be given to remove it.
        disabledOrUndefined() {
            return this.disabled || undefined
        }
    },
    methods: {
        /**
        * Emit close event when delete button is clicked
        * or delete key is pressed.
        */
        close(event) {
            if (this.disabled) return

            this.$emit('close', event);
        },
        /**
        * Emit click event when tag is clicked.
        */
        click(event) {
            if (this.disabled) return

            this.$emit('click', event);
        }
    }
};

const _hoisted_1 = {
  key: 0,
  class: "tags has-addons inline-tags"
};
const _hoisted_2 = ["aria-label", "tabindex", "disabled"];
const _hoisted_3 = ["aria-label", "disabled", "tabindex"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_icon = vue.resolveComponent("b-icon");

  return ($props.attached && $props.closable)
    ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [
        vue.createElementVNode("span", {
          class: vue.normalizeClass(["tag", [$props.type, $props.size, { 'is-rounded': $props.rounded }]])
        }, [
          ($props.icon)
            ? (vue.openBlock(), vue.createBlock(_component_b_icon, {
                key: 0,
                icon: $props.icon,
                size: $props.size,
                type: $props.iconType,
                pack: $props.iconPack
              }, null, 8 /* PROPS */, ["icon", "size", "type", "pack"]))
            : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("span", {
            class: vue.normalizeClass({ 'has-ellipsis': $props.ellipsis }),
            onClick: _cache[0] || (_cache[0] = (...args) => ($options.click && $options.click(...args)))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2 /* CLASS */)
        ], 2 /* CLASS */),
        vue.createElementVNode("a", {
          class: vue.normalizeClass(["tag", [$props.size,
                     $props.closeType,
                     {'is-rounded': $props.rounded},
                     $props.closeIcon ? 'has-delete-icon' : 'is-delete']]),
          role: "button",
          "aria-label": $props.ariaCloseLabel,
          tabindex: $props.tabstop ? 0 : false,
          disabled: $options.disabledOrUndefined,
          onClick: _cache[1] || (_cache[1] = (...args) => ($options.close && $options.close(...args))),
          onKeyup: _cache[2] || (_cache[2] = vue.withKeys(vue.withModifiers((...args) => ($options.close && $options.close(...args)), ["prevent"]), ["delete"]))
        }, [
          ($props.closeIcon)
            ? (vue.openBlock(), vue.createBlock(_component_b_icon, {
                key: 0,
                "custom-class": "",
                icon: $props.closeIcon,
                size: $props.size,
                type: $props.closeIconType,
                pack: $props.closeIconPack
              }, null, 8 /* PROPS */, ["icon", "size", "type", "pack"]))
            : vue.createCommentVNode("v-if", true)
        ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_2)
      ]))
    : (vue.openBlock(), vue.createElementBlock("span", {
        key: 1,
        class: vue.normalizeClass(["tag", [$props.type, $props.size, { 'is-rounded': $props.rounded }]])
      }, [
        ($props.icon)
          ? (vue.openBlock(), vue.createBlock(_component_b_icon, {
              key: 0,
              icon: $props.icon,
              size: $props.size,
              type: $props.iconType,
              pack: $props.iconPack
            }, null, 8 /* PROPS */, ["icon", "size", "type", "pack"]))
          : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("span", {
          class: vue.normalizeClass({ 'has-ellipsis': $props.ellipsis }),
          onClick: _cache[3] || (_cache[3] = (...args) => ($options.click && $options.click(...args)))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2 /* CLASS */),
        ($props.closable)
          ? (vue.openBlock(), vue.createElementBlock("a", {
              key: 1,
              role: "button",
              "aria-label": $props.ariaCloseLabel,
              class: vue.normalizeClass(["delete is-small", $props.closeType]),
              disabled: $options.disabledOrUndefined,
              tabindex: $props.tabstop ? 0 : false,
              onClick: _cache[4] || (_cache[4] = (...args) => ($options.close && $options.close(...args))),
              onKeyup: _cache[5] || (_cache[5] = vue.withKeys(vue.withModifiers((...args) => ($options.close && $options.close(...args)), ["prevent"]), ["delete"]))
            }, null, 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_3))
          : vue.createCommentVNode("v-if", true)
      ], 2 /* CLASS */))
}

script.render = render;
script.__file = "src/components/tag/Tag.vue";

exports.script = script;
