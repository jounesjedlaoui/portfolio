'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var helpers = require('./helpers-bVbODwYf.js');
var classCallCheck = require('./classCallCheck-JgflGFD8.js');
var vue = require('vue');
var Loading = require('./Loading-Vrc09uA-.js');
var plugins = require('./plugins-aEujRPek.js');
require('./typeof-fhICEa4F.js');
require('./ssr-oZrLQTGB.js');

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { helpers._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var LoadingProgrammatic = /*#__PURE__*/function () {
  function LoadingProgrammatic(app) {
    classCallCheck._classCallCheck(this, LoadingProgrammatic);
    this.app = app; // may be undefined in the testing environment
  }
  classCallCheck._createClass(LoadingProgrammatic, [{
    key: "open",
    value: function open(params) {
      var defaultParam = {
        programmatic: true
      };
      var propsData = helpers.merge(defaultParam, params);
      var container = document.createElement('div');
      // Vue 3 requires a new app to mount another component
      var vueInstance = vue.createApp({
        data: function data() {
          return {
            loadingVNode: null
          };
        },
        methods: {
          close: function close() {
            // TODO: too much dependence on Vue's internal structure?
            var loading = helpers.getComponentFromVNode(this.loadingVNode);
            if (loading) {
              loading.close();
            }
          }
        },
        render: function render() {
          this.loadingVNode = vue.h(Loading.script, _objectSpread(_objectSpread({}, propsData), {}, {
            onClose: function onClose() {
              if (propsData.onClose) {
                propsData.onClose.apply(propsData, arguments);
              }
              // timeout for the animation complete before destroying
              setTimeout(function () {
                vueInstance.unmount();
              }, 150);
            }
          }));
          return this.loadingVNode;
        }
      });
      if (this.app) {
        helpers.copyAppContext(this.app, vueInstance);
      }
      return vueInstance.mount(container);
    }
  }]);
  return LoadingProgrammatic;
}();
var Plugin = {
  install: function install(Vue) {
    plugins.registerComponent(Vue, Loading.script);
    plugins.registerComponentProgrammatic(Vue, 'loading', new LoadingProgrammatic(Vue));
  }
};
plugins.use(Plugin);

exports.BLoading = Loading.script;
exports.LoadingProgrammatic = LoadingProgrammatic;
exports.default = Plugin;
