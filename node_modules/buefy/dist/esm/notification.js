import { _ as _defineProperty, r as removeElement, m as merge, z as getComponentFromVNode, A as copyAppContext } from './helpers-O9h6_ICO.js';
import { _ as _createClass, a as _classCallCheck } from './classCallCheck-E4khD9xn.js';
import { resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, createElementBlock, createCommentVNode, createVNode, renderSlot, Fragment, vShow, mergeProps, createApp, h } from 'vue';
import { s as script$2 } from './Progress-7Ux1HulH.js';
import { M as MessageMixin } from './MessageMixin-KdZp92I_.js';
import { c as config } from './config-nHWiBviw.js';
import { N as NoticeMixin } from './NoticeMixin-6c_QVv-2.js';
import { u as use, a as registerComponent, r as registerComponentProgrammatic } from './plugins-1raZX6c5.js';
import './typeof-Z4rCTFCZ.js';
import './Icon-fJqkx1gN.js';

var script$1 = {
    name: 'BNotification',
    components: {
        // directly registers Progress
        // in case Notification is programmatically opened
        [script$2.name]: script$2
    },
    mixins: [MessageMixin],
    props: {
        position: String,
        ariaCloseLabel: String,
        animation: {
            type: String,
            default: 'fade'
        }
    }
};

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = {
  key: 1,
  class: "media"
};
const _hoisted_3 = {
  key: 0,
  class: "media-left"
};
const _hoisted_4 = { class: "media-content" };
const _hoisted_5 = ["innerHTML"];

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_icon = resolveComponent("b-icon");
  const _component_b_progress = resolveComponent("b-progress");

  return (openBlock(), createBlock(Transition, {
    name: $props.animation,
    persisted: ""
  }, {
    default: withCtx(() => [
      withDirectives(createElementVNode("article", {
        class: normalizeClass(["notification", [_ctx.type, $props.position]]),
        onClick: _cache[1] || (_cache[1] = (...args) => (_ctx.click && _ctx.click(...args)))
      }, [
        (_ctx.closable)
          ? (openBlock(), createElementBlock("button", {
              key: 0,
              class: "delete",
              type: "button",
              onClick: _cache[0] || (_cache[0] = (...args) => (_ctx.close && _ctx.close(...args))),
              "aria-label": $props.ariaCloseLabel
            }, null, 8 /* PROPS */, _hoisted_1))
          : createCommentVNode("v-if", true),
        (_ctx.$slots.default || _ctx.message)
          ? (openBlock(), createElementBlock("div", _hoisted_2, [
              (_ctx.computedIcon && _ctx.hasIcon)
                ? (openBlock(), createElementBlock("div", _hoisted_3, [
                    createVNode(_component_b_icon, {
                      icon: _ctx.computedIcon,
                      pack: _ctx.iconPack,
                      size: _ctx.newIconSize,
                      both: "",
                      "aria-hidden": ""
                    }, null, 8 /* PROPS */, ["icon", "pack", "size"])
                  ]))
                : createCommentVNode("v-if", true),
              createElementVNode("div", _hoisted_4, [
                (_ctx.$slots.default)
                  ? renderSlot(_ctx.$slots, "default", { key: 0 })
                  : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createCommentVNode(" eslint-disable-next-line vue/no-v-html "),
                      createElementVNode("p", {
                        class: "text",
                        innerHTML: _ctx.message
                      }, null, 8 /* PROPS */, _hoisted_5)
                    ], 64 /* STABLE_FRAGMENT */))
              ])
            ]))
          : createCommentVNode("v-if", true),
        (_ctx.progressBar)
          ? (openBlock(), createBlock(_component_b_progress, {
              key: 2,
              class: "auto-close-progress",
              value: _ctx.remainingTime - 1,
              max: _ctx.duration / 1000 - 1,
              type: _ctx.type,
              rounded: false
            }, null, 8 /* PROPS */, ["value", "max", "type"]))
          : createCommentVNode("v-if", true)
      ], 2 /* CLASS */), [
        [vShow, _ctx.isActive]
      ])
    ]),
    _: 3 /* FORWARDED */
  }, 8 /* PROPS */, ["name"]))
}

script$1.render = render$1;
script$1.__file = "src/components/notification/Notification.vue";

function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }

// drops props not used by `NoticeMixin` itself
// - type
// - message
// - duration
var _NoticeMixin$props = NoticeMixin.props,
  queue = _NoticeMixin$props.queue,
  indefinite = _NoticeMixin$props.indefinite,
  pauseOnHover = _NoticeMixin$props.pauseOnHover,
  position = _NoticeMixin$props.position,
  container = _NoticeMixin$props.container;
var NoticeMixinSubset = _objectSpread$1(_objectSpread$1({}, NoticeMixin), {}, {
  props: {
    queue: queue,
    indefinite: indefinite,
    pauseOnHover: pauseOnHover,
    position: position,
    container: container
  }
});

var script = {
    name: 'BNotificationNotice',
    components: {
        [script$1.name]: script$1
    },
    mixins: [NoticeMixinSubset],
    props: {
        duration: Number
    },
    emits: ['close'],
    data() {
        return {
            newDuration: this.duration || config.defaultNotificationDuration
        }
    },
    methods: {
        close() {
            if (!this.isPaused) {
                clearTimeout(this.timer);
                this.$refs.notification.isActive = false;
                this.$emit('close');

                // Timeout for the animation complete before destroying
                setTimeout(() => {
                    removeElement(this.$el);
                }, 150);
            }
        }
    }
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_notification = resolveComponent("b-notification");

  return (_ctx.$slots.default != null)
    ? (openBlock(), createBlock(_component_b_notification, mergeProps({
        key: 0,
        ref: "notification",
        position: _ctx.position,
        "model-value": _ctx.isActive
      }, _ctx.$attrs, {
        duration: $props.duration,
        onClick: _ctx.click,
        onClose: $options.close,
        onMouseenter: _ctx.pause,
        onMouseleave: _ctx.removePause
      }), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3 /* FORWARDED */
      }, 16 /* FULL_PROPS */, ["position", "model-value", "duration", "onClick", "onClose", "onMouseenter", "onMouseleave"]))
    : (openBlock(), createBlock(_component_b_notification, mergeProps({
        key: 1,
        ref: "notification",
        position: _ctx.position,
        "model-value": _ctx.isActive
      }, _ctx.$attrs, {
        duration: $props.duration,
        onClick: _ctx.click,
        onClose: $options.close,
        onMouseenter: _ctx.pause,
        onMouseleave: _ctx.removePause
      }), null, 16 /* FULL_PROPS */, ["position", "model-value", "duration", "onClick", "onClose", "onMouseenter", "onMouseleave"]))
}

script.render = render;
script.__file = "src/components/notification/NotificationNotice.vue";

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var NotificationProgrammatic = /*#__PURE__*/function () {
  function NotificationProgrammatic(app) {
    _classCallCheck(this, NotificationProgrammatic);
    this.app = app; // may be undefined in the testing environment
  }
  _createClass(NotificationProgrammatic, [{
    key: "open",
    value: function open(params) {
      if (typeof params === 'string') {
        params = {
          message: params
        };
      }
      var defaultParam = {
        position: config.defaultNotificationPosition || 'is-top-right'
      };
      if (params.parent) {
        delete params.parent;
      }
      var _onClose;
      if (typeof params.onClose === 'function') {
        _onClose = params.onClose;
        delete params.onClose;
      }
      var slot;
      if (Array.isArray(params.message)) {
        slot = params.message;
        delete params.message;
      }
      var propsData = merge(defaultParam, params);
      var container = document.createElement('div');
      // Vue 3 requires a new app to mount another component
      var vueInstance = createApp({
        data: function data() {
          return {
            noticeVNode: null
          };
        },
        methods: {
          close: function close() {
            var notice = getComponentFromVNode(this.noticeVNode);
            if (notice) {
              notice.close();
            }
          }
        },
        render: function render() {
          this.noticeVNode = h(script, _objectSpread(_objectSpread({}, propsData), {}, {
            onClose: function onClose() {
              if (_onClose != null) {
                _onClose();
              }
              // waits for a while in favor of animation
              setTimeout(function () {
                vueInstance.unmount();
              }, 150);
            }
          }), slot != null ? {
            "default": function _default() {
              return slot;
            }
          } : undefined);
          return this.noticeVNode;
        }
      });
      if (this.app) {
        copyAppContext(this.app, vueInstance);
      } else {
        // workaround for an error that
        // $buefy.globalNoticeInterval is not defined
        vueInstance.use({
          install: function install(Vue) {
            Vue.config.globalProperties.$buefy = {
              globalNoticeInterval: null
            };
          }
        });
      }
      return vueInstance.mount(container);
    }
  }]);
  return NotificationProgrammatic;
}();
var Plugin = {
  install: function install(Vue) {
    registerComponent(Vue, script$1);
    registerComponentProgrammatic(Vue, 'notification', new NotificationProgrammatic(Vue));
  }
};
use(Plugin);

export { script$1 as BNotification, NotificationProgrammatic, Plugin as default };
