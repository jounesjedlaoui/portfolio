import { m as merge, z as getComponentFromVNode, A as copyAppContext, _ as _defineProperty } from './helpers-O9h6_ICO.js';
import { _ as _createClass, a as _classCallCheck } from './classCallCheck-E4khD9xn.js';
import { createApp, h } from 'vue';
import { s as script } from './Modal-nlbxVy5Q.js';
import { u as use, a as registerComponent, r as registerComponentProgrammatic } from './plugins-1raZX6c5.js';
import './typeof-Z4rCTFCZ.js';
import './trapFocus-IMs77O3T.js';
import './config-nHWiBviw.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ModalProgrammatic = /*#__PURE__*/function () {
  function ModalProgrammatic(app) {
    _classCallCheck(this, ModalProgrammatic);
    this.app = app; // may be undefined in the testing environment
  }
  _createClass(ModalProgrammatic, [{
    key: "open",
    value: function open(params) {
      if (typeof params === 'string') {
        params = {
          content: params
        };
      }
      var defaultParam = {
        programmatic: true
      };
      if (params.parent) {
        delete params.parent;
      }
      var slot;
      if (Array.isArray(params.content)) {
        slot = params.content;
        delete params.content;
      }
      var propsData = merge(defaultParam, params);
      var container = document.createElement('div');
      // Vue 3 requires a new app to mount another component
      var vueInstance = createApp({
        data: function data() {
          return {
            modalVNode: null
          };
        },
        methods: {
          close: function close() {
            var modal = getComponentFromVNode(this.modalVNode);
            if (modal) {
              modal.close();
            }
          }
        },
        render: function render() {
          this.modalVNode = h(script, _objectSpread(_objectSpread({}, propsData), {}, {
            onClose: function onClose() {
              vueInstance.unmount();
            },
            // intentionally overrides propsData.onCancel
            // to prevent propsData.onCancel from receiving a "cancel" event
            onCancel: function onCancel() {},
            cancelCallback: function cancelCallback() {
              if (propsData.onCancel != null) {
                propsData.onCancel.apply(propsData, arguments);
              }
            }
          }), slot ? {
            "default": function _default() {
              return slot;
            }
          } : undefined);
          return this.modalVNode;
        }
      });
      if (this.app) {
        copyAppContext(this.app, vueInstance);
      }
      return vueInstance.mount(container);
    }
  }]);
  return ModalProgrammatic;
}();
var Plugin = {
  install: function install(Vue) {
    registerComponent(Vue, script);
    registerComponentProgrammatic(Vue, 'modal', new ModalProgrammatic(Vue));
  }
};
use(Plugin);

export { script as BModal, ModalProgrammatic, Plugin as default };
