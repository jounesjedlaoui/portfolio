import { m as merge, z as getComponentFromVNode, A as copyAppContext, _ as _defineProperty } from './helpers-O9h6_ICO.js';
import { _ as _createClass, a as _classCallCheck } from './classCallCheck-E4khD9xn.js';
import { openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, renderSlot, createElementBlock, Fragment, createCommentVNode, toDisplayString, vShow, createApp, h } from 'vue';
import { c as config } from './config-nHWiBviw.js';
import { N as NoticeMixin } from './NoticeMixin-6c_QVv-2.js';
import { u as use, r as registerComponentProgrammatic } from './plugins-1raZX6c5.js';
import './typeof-Z4rCTFCZ.js';

var script = {
    name: 'BSnackbar',
    mixins: [NoticeMixin],
    props: {
        actionText: {
            type: String,
            default: 'OK'
        },
        onAction: {
            type: Function,
            default: () => {}
        },
        cancelText: {
            type: String,
            default: null
        }
    },
    data() {
        return {
            newDuration: this.duration || config.defaultSnackbarDuration
        }
    },
    methods: {
        /**
        * Click listener.
        * Call action prop before closing (from Mixin).
        */
        action() {
            this.onAction();
            this.close();
        }
    }
};

const _hoisted_1 = ["role"];
const _hoisted_2 = ["innerHTML"];
const _hoisted_3 = { class: "button" };
const _hoisted_4 = { class: "button" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock(Transition, {
    "enter-active-class": _ctx.transition.enter,
    "leave-active-class": _ctx.transition.leave,
    persisted: ""
  }, {
    default: withCtx(() => [
      withDirectives(createElementVNode("div", {
        class: normalizeClass(["snackbar", [_ctx.type,_ctx.position]]),
        onMouseenter: _cache[2] || (_cache[2] = (...args) => (_ctx.pause && _ctx.pause(...args))),
        onMouseleave: _cache[3] || (_cache[3] = (...args) => (_ctx.removePause && _ctx.removePause(...args))),
        role: $props.actionText ? 'alertdialog' : 'alert'
      }, [
        (_ctx.$slots.default)
          ? renderSlot(_ctx.$slots, "default", { key: 0 })
          : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createCommentVNode(" eslint-disable-next-line vue/no-v-html "),
              createElementVNode("div", {
                class: "text",
                innerHTML: _ctx.message
              }, null, 8 /* PROPS */, _hoisted_2)
            ], 64 /* STABLE_FRAGMENT */)),
        ($props.cancelText)
          ? (openBlock(), createElementBlock("div", {
              key: 2,
              class: "action is-light is-cancel",
              onClick: _cache[0] || (_cache[0] = (...args) => (_ctx.close && _ctx.close(...args)))
            }, [
              createElementVNode("button", _hoisted_3, toDisplayString($props.cancelText), 1 /* TEXT */)
            ]))
          : createCommentVNode("v-if", true),
        ($props.actionText)
          ? (openBlock(), createElementBlock("div", {
              key: 3,
              class: normalizeClass(["action", _ctx.type]),
              onClick: _cache[1] || (_cache[1] = (...args) => ($options.action && $options.action(...args)))
            }, [
              createElementVNode("button", _hoisted_4, toDisplayString($props.actionText), 1 /* TEXT */)
            ], 2 /* CLASS */))
          : createCommentVNode("v-if", true)
      ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_1), [
        [vShow, _ctx.isActive]
      ])
    ]),
    _: 3 /* FORWARDED */
  }, 8 /* PROPS */, ["enter-active-class", "leave-active-class"]))
}

script.render = render;
script.__file = "src/components/snackbar/Snackbar.vue";

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var SnackbarProgrammatic = /*#__PURE__*/function () {
  function SnackbarProgrammatic(app) {
    _classCallCheck(this, SnackbarProgrammatic);
    this.app = app; // may be undefined in the testing environment
  }
  _createClass(SnackbarProgrammatic, [{
    key: "open",
    value: function open(params) {
      if (typeof params === 'string') {
        params = {
          message: params
        };
      }
      var defaultParam = {
        type: 'is-success',
        position: config.defaultSnackbarPosition || 'is-bottom-right',
        queue: true
      };
      if (params.parent) {
        delete params.parent;
      }
      var slot;
      if (Array.isArray(params.message)) {
        slot = params.message;
        delete params.message;
      }
      var propsData = merge(defaultParam, params);
      var container = document.createElement('div');
      // Vue 3 requires a new app to mount another component
      var vueInstance = createApp({
        data: function data() {
          return {
            snackbarVNode: null
          };
        },
        methods: {
          close: function close() {
            var snackbar = getComponentFromVNode(this.snackbarVNode);
            if (snackbar) {
              snackbar.close();
            }
          }
        },
        render: function render() {
          this.snackbarVNode = h(script, _objectSpread(_objectSpread({}, propsData), {}, {
            onClose: function onClose() {
              if (typeof propsData.onClose === 'function') {
                propsData.onClose();
              }
              // timeout for the animation complete
              // before unmounting
              setTimeout(function () {
                vueInstance.unmount();
              }, 150);
            }
          }), slot != null ? {
            "default": function _default() {
              return slot;
            }
          } : undefined);
          return this.snackbarVNode;
        }
      });
      if (this.app) {
        copyAppContext(this.app, vueInstance);
      } else {
        // adds $buefy global property so that
        // this.$buefy.globalNoticeInterval is available
        vueInstance.config.globalProperties.$buefy = {};
      }
      return vueInstance.mount(container);
    }
  }]);
  return SnackbarProgrammatic;
}();
var Plugin = {
  install: function install(Vue) {
    registerComponentProgrammatic(Vue, 'snackbar', new SnackbarProgrammatic(Vue));
  }
};
use(Plugin);

export { script as BSnackbar, SnackbarProgrammatic, Plugin as default };
