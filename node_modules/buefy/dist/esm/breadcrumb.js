import { c as config } from './config-nHWiBviw.js';
import { openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, mergeProps, createBlock, resolveDynamicComponent, normalizeProps, guardReactiveProps, withCtx } from 'vue';
import { C as CompatFallthroughMixin } from './CompatFallthroughMixin-Ev2XGfi3.js';
import { u as use, a as registerComponent } from './plugins-1raZX6c5.js';

var script$1 = {
    name: 'BBreadcrumb',
    props: {
        align: {
            type: String,
            default: () => {
                return config.defaultBreadcrumbAlign
            }
        },
        separator: {
            type: String,
            default: () => {
                return config.defaultBreadcrumbSeparator
            }
        },
        size: {
            type: String,
            default: () => {
                return config.defaultBreadcrumbSize
            }
        }
    },

    computed: {
        breadcrumbClasses() {
            return ['breadcrumb', this.align, this.separator, this.size]
        }
    }
};

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("nav", {
    class: normalizeClass($options.breadcrumbClasses)
  }, [
    createElementVNode("ul", null, [
      renderSlot(_ctx.$slots, "default")
    ])
  ], 2 /* CLASS */))
}

script$1.render = render$1;
script$1.__file = "src/components/breadcrumb/Breadcrumb.vue";

var script = {
    name: 'BBreadcrumbItem',
    mixins: [CompatFallthroughMixin],
    props: {
        tag: {
            type: String,
            default: () => {
                return config.defaultBreadcrumbTag
            }
        },
        active: Boolean
    }
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("li", mergeProps({
    class: { 'is-active': $props.active }
  }, _ctx.rootAttrs), [
    (openBlock(), createBlock(resolveDynamicComponent($props.tag), normalizeProps(guardReactiveProps(_ctx.fallthroughAttrs)), {
      default: withCtx(() => [
        renderSlot(_ctx.$slots, "default")
      ]),
      _: 3 /* FORWARDED */
    }, 16 /* FULL_PROPS */))
  ], 16 /* FULL_PROPS */))
}

script.render = render;
script.__file = "src/components/breadcrumb/BreadcrumbItem.vue";

var Plugin = {
  install: function install(Vue) {
    registerComponent(Vue, script$1);
    registerComponent(Vue, script);
  }
};
use(Plugin);

export { script$1 as BBreadcrumb, script as BBreadcrumbItem, Plugin as default };
