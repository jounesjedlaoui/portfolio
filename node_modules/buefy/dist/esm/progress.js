import { P as PROGRESS_INJECTION_KEY, s as script$1 } from './Progress-7Ux1HulH.js';
import { openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';
import { u as use, a as registerComponent } from './plugins-1raZX6c5.js';
import './config-nHWiBviw.js';

var script = {
    name: 'BProgressBar',
    inject: {
        parent: {
            from: PROGRESS_INJECTION_KEY,
            default: undefined
        }
    },
    props: {
        type: {
            type: [String, Object],
            default: undefined
        },
        value: {
            type: Number,
            default: undefined
        },
        showValue: {
            type: Boolean,
            default: false
        }
    },
    computed: {
        newType() {
            return [
                this.parent.size,
                this.type || this.parent.type
            ]
        },
        newShowValue() {
            return this.showValue || this.parent.showValue
        },
        newValue() {
            return this.parent.calculateValue(this.value)
        },
        barWidth() {
            return `${this.value * 100 / this.parent.max}%`
        }
    }
};

const _hoisted_1 = ["aria-valuenow", "aria-valuemax"];
const _hoisted_2 = {
  key: 0,
  class: "progress-value"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["progress-bar", $options.newType]),
    role: "progressbar",
    "aria-valuenow": $props.value,
    "aria-valuemax": $options.parent.max,
    "aria-valuemin": "0",
    style: normalizeStyle({width: $options.barWidth})
  }, [
    ($options.newShowValue)
      ? (openBlock(), createElementBlock("p", _hoisted_2, [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString($options.newValue), 1 /* TEXT */)
          ])
        ]))
      : createCommentVNode("v-if", true)
  ], 14 /* CLASS, STYLE, PROPS */, _hoisted_1))
}

script.render = render;
script.__file = "src/components/progress/ProgressBar.vue";

var Plugin = {
  install: function install(Vue) {
    registerComponent(Vue, script$1);
    registerComponent(Vue, script);
  }
};
use(Plugin);

export { script$1 as BProgress, script as BProgressBar, Plugin as default };
